<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:jpa="http://www.springframework.org/schema/data/jpa"
  xmlns:tx="http://www.springframework.org/schema/tx"
  
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="http://www.springframework.org/schema/mvc 
  	http://www.springframework.org/schema/mvc/spring-mvc.xsd
  	http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/jpa 
    http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/lang 
    http://www.springframework.org/schema/lang/spring-lang.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model gives exception if not mentioned from handlermapperrs -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
 
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/resources/views/" />
		<property name="suffix" value=".html" />
	</bean>
	
	
<!-- 	It scans all the annotations in the java classes and also help to registered the bean in java class -->
 	<context:component-scan base-package="net.codejava.spring." />
 	
<!--  	This is to activate the annotations in java for beans which are already registered -->	
	<context:annotation-config/>
	
  <!--   <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/usersdb"/>
        <property name="username" value="root"/>
        <property name="password" value="P@ssw0rd"/>
    </bean>	 -->
    <!-- <bean id="userA" class="net.codejava.spring.model.User">
    
    </bean> -->
    
<!--      <bean id="userB" class="net.codejava.spring.model.User"> -->
    
<!--     </bean> -->

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.postgresql.Driver"/>
        <property name="url" value="jdbc:postgresql://localhost:5432/test_app"/>
        <property name="username" value="postgres"/>
        <property name="password" value="altimetrik"/>
    </bean>	
    
   <!--  
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
    </bean> -->
     
    <tx:annotation-driven />
    
  <!--   <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
     -->
 	
	<!-- <bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
	    <property name="userDetailsService" ref="userDetailsService" />
	    
	</bean> -->
<!-- <bean id="springSecurityFilterChain" class="org.springframework.web.filter.DelegatingFilterProxy"/> -->


 <bean id="myEmf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <property name="packagesToScan" value="net.codejava.spring." />
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      
      <property name="jpaProperties">
         <props>
<!--             <prop key="hibernate.hbm2ddl.auto">create-drop</prop> -->
<!--             <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop> -->
             <prop key="hibernate.show_sql">true</prop>
              <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
<!--              <prop key="spring.jpa.show-sql">true</prop> -->
         </props>
      </property>
   </bean>
   
        <jpa:repositories base-package="net.codejava.spring.repository" entity-manager-factory-ref="myEmf" />  	
   
 
   <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="myEmf" />
   </bean>
   <tx:annotation-driven />
 
   <bean id="persistenceExceptionTranslationPostProcessor"
      class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
   	
   	
   		<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="defaultLocale" value="en" />
	</bean>
	
	<bean id="localeChangeInterceptor"
		class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
		<property name="paramName" value="language" />
	</bean>
	
	<bean id="handlerMapping"
    	class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
	    <property name="interceptors">
	        <ref bean="localeChangeInterceptor" />
	    </property>    
	</bean>
   <!-- 	<bean id="userDao" class="net.codejava.spring.dao.UserDAOImpl">
	    <constructor-arg>
	        <ref bean="myEmf" />
	    </constructor-arg>
	</bean>    	
	
		<bean id="countryDao" class="net.codejava.spring.dao.CountryDaoImpl">
	    <constructor-arg>
	        <ref bean="myEmf" />
	    </constructor-arg>
	</bean>  
	<bean id="shopService" class="net.codejava.spring.dao.ShopServiceImpl">
	    <constructor-arg>
	        <ref bean="myEmf" />
	    </constructor-arg>
	</bean>  -->
</beans>
